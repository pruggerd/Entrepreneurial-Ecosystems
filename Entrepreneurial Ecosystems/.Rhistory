df1 = df1[, -1]
dfheatmap = subset(df1, select = c("province", "year", "inst_comp", "cult_comp", "infra_comp", "demand_comp", "netw_comp", "leader_vc", "finance", "talent_cv", "know_comp", "inter_comp", "index_mult"))
df2 = aggregate(dfheatmap, list(province = dfheatmap$province), mean)
df2 = df2[ , - c(2,3)]
colnames(df2) = c("Province", "Institution", "Culture", "Infra", "Demand", "Network", "Leader", "Finance", "Talent", "Knowl.", "Intermed.", "Entr. Index")
df2[,-1]  = round(df2[,-1],2)
df2 = df2[order(df2$`Entr. Index`), ]
melt1 = melt(df2)
melt1$Y1 <- cut(melt1$value, breaks = c(0, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2, Inf),right = FALSE)
melt1$Performance = as.numeric(melt1$Y1)
setwd("~/Utrecht/M-Economics/Period 3/Business Economics/DataProject/Latex/graphs")
heatmap  = ggplot(melt1, aes(x = variable, y = reorder(Province, value, order = TRUE))) +
geom_tile(color = "black", aes(fill = Performance)) +
geom_text(aes(label = value))+
labs(x = "Elements of the Ecosystem", y = "Provinces of the Netherlands", title = "Individual Elements and the Entrepreneurial Ecosystem of the Netherlands")+
scale_fill_gradient2(low = "pink", high = "Darkgreen", midpoint = 0.8)
heatmap
##################################
##################################
# Title: Entrpreneurial Ecosystems and Entrepreneurial Index in the Netherlands
# Spatial Data visualization
# Author: Dominik Prugger
# Date: 17.4.2018
##################################
##################################
#Select needed packages, install or access
#install.packages("ggmap")
#install.packages("rgeos")
#install.packages("maptools")
#install.packages("tmap")
#install.packages("shinyjs")
library(foreign)
library(dplyr)
library(tidyr)
library(ggplot2)
library(rgeos)
library(maptools)
library(tmap)
library(shinyjs)
library(rgdal)
setwd("~/Utrecht/Code for Github/Entrepreneurial Ecosystems")
#read in the data
data2009 = read.csv("2009.csv",skip = 2, sep = ";", header = T)
data2012 = read.csv("2012.csv", skip = 2, sep = ";", header = T)
data2015 = read.csv("2015.csv", skip = 2, sep = ";", header = T)
gazelle = read.csv("gazellen.csv", skip = 2, sep = ";", header = T)
# Load in the spatial data for the Netherlands
#get a seperate dataset for the spatial data
ndl  = spatial_data = readOGR(dsn = "NLD_adm1.shp")
#specify colnames and make it ready to merge
excelnames = read.csv("colnames.csv", sep = ";", header = T)
colnames(data2009) = colnames(excelnames)
colnames(data2012) = colnames(excelnames)
colnames(data2015) = colnames(excelnames)
colnames(gazelle) = c("region", "province", "gazelle2009", "gazelle2010", "gazelle2011", "gazelle2012", "gazelle2013", "gazelle2014",
"gazelle2015", "gazelle2016", "gazelle2017")
#add year variables to the datasets
data2009$year = 2009
data2012$year = 2012
data2015$year = 2015
#merging the datasets
#1 Appending to all the other data
df1 = rbind(data2009, data2012, data2015)
#letting the year to be third variable
df1 = df1[, c(1,2,30, c(3:29))]
#2 merge the gazelles data
#first reshape the gazelle data into long format
#change the class of numeric gazelle things to numeric (first character, then numeric)
#change from comma to dot
gazelle <- data.frame(lapply(gazelle, function(x) {gsub(",", ".", x)}))
for(i in c(3:ncol(gazelle))) {
gazelle[,i] <- as.character(gazelle[,i])
}
#now change from character to numeric
for(i in c(3:ncol(gazelle))) {
gazelle[,i] <- as.numeric(gazelle[,i])
}
#inspect the data
ndl_data = ndl@data
sapply(ndl@data, class)
#merge the spatial ndl file with the gazelles
#1. change province name in ndl data and find states that are not the same
colnames(ndl@data)[5] = colnames(gazelle[2])
diff = Reduce(setdiff, gazelle$province, ndl@data$province)
ndl@data$province = as.character(ndl@data$province)
gazelle$province = as.character(gazelle$province)
#change the varying name of Friesland/delete the second friesland
gazelle[2,2] = ndl@data$province[3]
#TRY 1: subset to only land provinces
ndl = ndl[ndl$TYPE_1 == "Provincie",]
#Now merge the two datafiles, first to avoid double friesland, then to add the seatiles
ndl@data = merge(ndl@data, gazelle, by= "province")
#check if successfull
ndl_data = ndl@data
#results: they are all factor and the shp file does not contain any information yet.
#start plotting the gazelles
#plot2009 = qtm(shp = ndl, fill = "gazelle2009", text = "province", fill.title= "Percentage of gazelles in 2009",
# text.size = 0.8, breaks = c(0:0.0008))
#plot2012 = qtm(shp = ndl, fill = "gazelle2012", fill.palette = "Blues", ncol = 2)
#plot2015 = qtm(shp = ndl, fill = c("gazelle2009", "gazelle2012", "gazelle2015"))
#plotting it for the different years
#1 Gazelle in 2009
#tmaptools::palette_explorer()
gazelle2009 = tm_shape(ndl)  + tmap_mode(mode = "view") + tm_borders()+
tm_fill("gazelle2009", breaks = c(0, 0.00015, 0.0003, 0.00045, 0.0006, 0.00075, 0.009),
textNA = "", title = "Percentage of Gazelles in 2009", text = "province", lwd = 2, colorNA = "NA", alpha = 1) +
tm_text("province", size = 0.8, col = "black")
#2 GAzelle in 2012
gazelle2012 = tm_shape(ndl)  + tmap_mode(mode = "view") + tm_borders()+
tm_fill("gazelle2012", breaks = c(0, 0.00015, 0.0003, 0.00045, 0.0006, 0.00075, 0.009),
textNA = "", title = "Percentage of Gazelles in 2009", text = "province", lwd = 2, colorNA = "NA", alpha = 1) +
tm_text("province", size = 0.8, col = "black")
#Gazelle in 2015
gazelle2015 = tm_shape(ndl)  + tmap_mode(mode = "view") + tm_borders()+
tm_fill("gazelle2015", breaks = c(0, 0.00015, 0.0003, 0.00045, 0.0006, 0.00075, 0.009),
textNA = "", title = "Percentage of Gazelles in 2009", text = "province", lwd = 2, colorNA = "NA", alpha = 1) +
tm_text("province", size = 0.8, col = "black")
tmap_save(gazelle2009, "gazelle2009.png", height=7)
tmap_save(gazelle2012, "gazelle2012.png", height = 7)
tmap_save(gazelle2015, "gazelle2015.png", height = 7)
##############################################################################################
##############################################################################################
#Part 2: Do the same for the Entrepreneurindex
##############################################################################################
##############################################################################################
#read in the data
data2009 = read.csv("2009.csv",skip = 2, sep = ";", header = T)
data2012 = read.csv("2012.csv", skip = 2, sep = ";", header = T)
data2015 = read.csv("2015.csv", skip = 2, sep = ";", header = T)
gazelle = read.csv("gazellen.csv", skip = 2, sep = ";", header = T)
# Load in the spatial data for the Netherlands
#get a seperate dataset for the spatial data
ndl  = spatial_data = readOGR(dsn = "NLD_adm1.shp")
#specify colnames and make it ready to merge
excelnames = read.csv("colnames.csv", sep = ";", header = T)
colnames(data2009) = colnames(excelnames)
colnames(data2012) = colnames(excelnames)
colnames(data2015) = colnames(excelnames)
colnames(gazelle) = c("region", "province", "gazelle2009", "gazelle2010", "gazelle2011", "gazelle2012", "gazelle2013", "gazelle2014",
"gazelle2015", "gazelle2016", "gazelle2017")
#add year variables to the datasets
data2009$year = 2009
data2012$year = 2012
data2015$year = 2015
#change dataframes to numeric
#change to numeric class of ndl document
#Change 2009
data2009 <- data.frame(lapply(data2009, function(x) {gsub(",", ".", x)}))
for(i in c(3:ncol(data2009))) {
data2009[,i] <- as.character(data2009[,i])
}
#now change from character to numeric
for(i in c(3:ncol(data2009))) {
data2009[,i] <- as.numeric(data2009[,i])
}
#Change 2012
data2012 <- data.frame(lapply(data2012, function(x) {gsub(",", ".", x)}))
for(i in c(3:ncol(data2012))) {
data2012[,i] <- as.character(data2012[,i])
}
#now change from character to numeric
for(i in c(3:ncol(data2012))) {
data2012[,i] <- as.numeric(data2012[,i])
}
#change 2015
data2015 <- data.frame(lapply(data2015, function(x) {gsub(",", ".", x)}))
for(i in c(3:ncol(data2015))) {
data2015[,i] <- as.character(data2015[,i])
}
#now change from character to numeric
for(i in c(3:ncol(data2015))) {
data2015[,i] <- as.numeric(data2015[,i])
}
#inspect the data
ndl_data = ndl@data
sapply(ndl@data, class)
#Start anew from here (differentiating from the gazelle plots)
#deleting the nederlands row from 2012 and 2015
data2009 = data2009[-1, ]
data2012 = data2012[-1, ]
data2015 = data2015[-1, ]
#change the colname of the entrepr. index
colnames(data2009)[29] = "index2009"
colnames(data2012)[29] = "index2012"
colnames(data2015)[29] = "index2015"
#merge the spatial ndl file with the data from index
ndl_data1 = ndl@data
#HAve same province colname
colnames(ndl@data)[5] = colnames(data2009[2])
#merge the spatial ndl file with the gazelles
#1. change province name in ndl data and find states that are not the same
ndl@data$province = as.character(ndl@data$province)
#change the class of the data provinces to character
data2009$province = as.character(gazelle$province)
data2012$province = as.character(gazelle$province)
data2015$province = as.character(gazelle$province)
#change the varying name of Friesland/delete the second friesland
ndl@data$province[3] = data2009[2,2]
#TRY 1: subset to only land provinces
ndl = ndl[ndl$TYPE_1 == "Provincie",]
#Now merge the two datafiles, first to avoid double friesland, then to add the seatiles
ndl@data = merge(ndl@data, data2009[c("province", "index2009")], by= "province")
ndl@data = merge(ndl@data, data2012[c("province", "index2012")], by= "province")
ndl@data = merge(ndl@data, data2015[c("province", "index2015")], by= "province")
#check if successfull
ndl_data = ndl@data
#results: they are all factor and the shp file does not contain any information yet.
#start plotting the gazelles
#plot2009 = qtm(shp = ndl, fill = "gazelle2009", text = "province", fill.title= "Percentage of gazelles in 2009",
# text.size = 0.8, breaks = c(0:0.0008))
#plot2012 = qtm(shp = ndl, fill = "gazelle2012", fill.palette = "Blues", ncol = 2)
#plot2015 = qtm(shp = ndl, fill = c("gazelle2009", "gazelle2012", "gazelle2015"))
index2009 = tm_shape(ndl)  + tmap_mode(mode = "view") + tm_borders()+
tm_fill("index2009", breaks = c(0, 0.1, 0.25, 0.5, 1, 2, 4, Inf), palette = "YlGn",
textNA = "", title = "Entrepreneurial Index in 2009", text = "province", lwd = 2, colorNA = "NA", alpha = 1) +
tm_text("province", size = 0.8, col = "black")
#2 GAzelle in 2012
index2012 = tm_shape(ndl)  + tmap_mode(mode = "view") + tm_borders()+
tm_fill("index2012", breaks = c(0, 0.1, 0.25, 1, 2, 4, Inf), palette = "YlGn",
textNA = "", title = "Entrepreneurial Index in 2012", text = "province", lwd = 2, colorNA = "NA", alpha = 1) +
tm_text("province", size = 0.8, col = "black")
#Gazelle in 2015
index2015 = tm_shape(ndl)  + tmap_mode(mode = "view") + tm_borders()+
tm_fill("index2015", breaks = c(0, 0.1, 0.25, 1,2, 4, Inf), palette = "YlGn",
textNA = "", title = "Entrepreneurial Index in 2015", text = "province", lwd = 2, colorNA = "NA", alpha = 1) +
tm_text("province", size = 0.8, col = "black")
#Now save the plots
tmap_save(index2009, "index2009.png", height=7)
tmap_save(index2012, "index2012.png", height = 7)
tmap_save(index2015, "index2015.png", height = 7)
#interactive
tmap_save(index2009, "index2009.html")
tmap_save(index2012, "index2012.html")
tmap_save(index2015, "index2015.html")
##############################################################################################
##############################################################################################
# Part 3: Heatmaps for Entrepreneurial Index
##############################################################################################
##############################################################################################
#Select working directory
setwd("~/Utrecht/M-Economics/Period 3/Business Economics/DataProject")
df1 = read.csv("panel-entr.csv")
df1$province = as.character(df1$province)
df1 = df1[, -1]
#subset the dataframe to only the component values
dfheatmap = subset(df1, select = c("province", "year", "inst_comp", "cult_comp", "infra_comp", "demand_comp", "netw_comp", "leader_vc", "finance", "talent_cv", "know_comp", "inter_comp", "index_mult"))
#now aggregate them to means for all three years
df2 = aggregate(dfheatmap, list(province = dfheatmap$province), mean)
df2 = df2[ , - c(2,3)]
#rename the columns nicely
colnames(df2) = c("Province", "Institution", "Culture", "Infra", "Demand", "Network", "Leader", "Finance", "Talent", "Knowl.", "Intermed.", "Entr. Index")
#round df
df2[,-1]  = round(df2[,-1],2)
df2 = df2[order(df2$`Entr. Index`), ]
#melt the dataframe
melt1 = melt(df2)
melt1$Y1 <- cut(melt1$value, breaks = c(0, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2, Inf),right = FALSE)
melt1$Performance = as.numeric(melt1$Y1)
heatmap  = ggplot(melt1, aes(x = variable, y = reorder(Province, value, order = TRUE))) +
geom_tile(color = "black", aes(fill = Performance)) +
geom_text(aes(label = value))+
labs(x = "Elements of the Ecosystem", y = "Provinces of the Netherlands", title = "Individual Elements and the Entrepreneurial Ecosystem of the Netherlands")+
scale_fill_gradient2(low = "pink", high = "Darkgreen", midpoint = 0.8)
heatmap
ggsave("heatmap.png", plot = heatmap)
##################################
##################################
# Title: Entrpreneurial Ecosystems and Entrepreneurial Index in the Netherlands
# Spatial Data visualization
# Author: Dominik Prugger
# Date: 17.4.2018
##################################
##################################
#Select needed packages, install or access
#install.packages("ggmap")
#install.packages("rgeos")
#install.packages("maptools")
#install.packages("tmap")
#install.packages("shinyjs")
library(foreign)
library(dplyr)
library(tidyr)
library(ggplot2)
library(rgeos)
library(maptools)
library(tmap)
library(shinyjs)
library(rgdal)
setwd("~/Utrecht/Code for Github/Entrepreneurial Ecosystems")
#read in the data
data2009 = read.csv("2009.csv",skip = 2, sep = ";", header = T)
data2012 = read.csv("2012.csv", skip = 2, sep = ";", header = T)
data2015 = read.csv("2015.csv", skip = 2, sep = ";", header = T)
gazelle = read.csv("gazellen.csv", skip = 2, sep = ";", header = T)
# Load in the spatial data for the Netherlands
#get a seperate dataset for the spatial data
ndl  = spatial_data = readOGR(dsn = "NLD_adm1.shp")
#specify colnames and make it ready to merge
excelnames = read.csv("colnames.csv", sep = ";", header = T)
colnames(data2009) = colnames(excelnames)
colnames(data2012) = colnames(excelnames)
colnames(data2015) = colnames(excelnames)
colnames(gazelle) = c("region", "province", "gazelle2009", "gazelle2010", "gazelle2011", "gazelle2012", "gazelle2013", "gazelle2014",
"gazelle2015", "gazelle2016", "gazelle2017")
#add year variables to the datasets
data2009$year = 2009
data2012$year = 2012
data2015$year = 2015
#merging the datasets
#1 Appending to all the other data
df1 = rbind(data2009, data2012, data2015)
#letting the year to be third variable
df1 = df1[, c(1,2,30, c(3:29))]
#2 merge the gazelles data
#first reshape the gazelle data into long format
#change the class of numeric gazelle things to numeric (first character, then numeric)
#change from comma to dot
gazelle <- data.frame(lapply(gazelle, function(x) {gsub(",", ".", x)}))
for(i in c(3:ncol(gazelle))) {
gazelle[,i] <- as.character(gazelle[,i])
}
#now change from character to numeric
for(i in c(3:ncol(gazelle))) {
gazelle[,i] <- as.numeric(gazelle[,i])
}
#inspect the data
ndl_data = ndl@data
sapply(ndl@data, class)
#merge the spatial ndl file with the gazelles
#1. change province name in ndl data and find states that are not the same
colnames(ndl@data)[5] = colnames(gazelle[2])
diff = Reduce(setdiff, gazelle$province, ndl@data$province)
ndl@data$province = as.character(ndl@data$province)
gazelle$province = as.character(gazelle$province)
#change the varying name of Friesland/delete the second friesland
gazelle[2,2] = ndl@data$province[3]
#TRY 1: subset to only land provinces
ndl = ndl[ndl$TYPE_1 == "Provincie",]
#Now merge the two datafiles, first to avoid double friesland, then to add the seatiles
ndl@data = merge(ndl@data, gazelle, by= "province")
#check if successfull
ndl_data = ndl@data
#results: they are all factor and the shp file does not contain any information yet.
#start plotting the gazelles
#plot2009 = qtm(shp = ndl, fill = "gazelle2009", text = "province", fill.title= "Percentage of gazelles in 2009",
# text.size = 0.8, breaks = c(0:0.0008))
#plot2012 = qtm(shp = ndl, fill = "gazelle2012", fill.palette = "Blues", ncol = 2)
#plot2015 = qtm(shp = ndl, fill = c("gazelle2009", "gazelle2012", "gazelle2015"))
#plotting it for the different years
#1 Gazelle in 2009
#tmaptools::palette_explorer()
gazelle2009 = tm_shape(ndl)  + tmap_mode(mode = "view") + tm_borders()+
tm_fill("gazelle2009", breaks = c(0, 0.00015, 0.0003, 0.00045, 0.0006, 0.00075, 0.009),
textNA = "", title = "Percentage of Gazelles in 2009", text = "province", lwd = 2, colorNA = "NA", alpha = 1) +
tm_text("province", size = 0.8, col = "black")
#2 GAzelle in 2012
gazelle2012 = tm_shape(ndl)  + tmap_mode(mode = "view") + tm_borders()+
tm_fill("gazelle2012", breaks = c(0, 0.00015, 0.0003, 0.00045, 0.0006, 0.00075, 0.009),
textNA = "", title = "Percentage of Gazelles in 2009", text = "province", lwd = 2, colorNA = "NA", alpha = 1) +
tm_text("province", size = 0.8, col = "black")
#Gazelle in 2015
gazelle2015 = tm_shape(ndl)  + tmap_mode(mode = "view") + tm_borders()+
tm_fill("gazelle2015", breaks = c(0, 0.00015, 0.0003, 0.00045, 0.0006, 0.00075, 0.009),
textNA = "", title = "Percentage of Gazelles in 2009", text = "province", lwd = 2, colorNA = "NA", alpha = 1) +
tm_text("province", size = 0.8, col = "black")
tmap_save(gazelle2009, "gazelle2009.png", height=7)
tmap_save(gazelle2012, "gazelle2012.png", height = 7)
tmap_save(gazelle2015, "gazelle2015.png", height = 7)
##############################################################################################
##############################################################################################
#Part 2: Do the same for the Entrepreneurindex
##############################################################################################
##############################################################################################
#read in the data
data2009 = read.csv("2009.csv",skip = 2, sep = ";", header = T)
data2012 = read.csv("2012.csv", skip = 2, sep = ";", header = T)
data2015 = read.csv("2015.csv", skip = 2, sep = ";", header = T)
gazelle = read.csv("gazellen.csv", skip = 2, sep = ";", header = T)
# Load in the spatial data for the Netherlands
#get a seperate dataset for the spatial data
ndl  = spatial_data = readOGR(dsn = "NLD_adm1.shp")
#specify colnames and make it ready to merge
excelnames = read.csv("colnames.csv", sep = ";", header = T)
colnames(data2009) = colnames(excelnames)
colnames(data2012) = colnames(excelnames)
colnames(data2015) = colnames(excelnames)
colnames(gazelle) = c("region", "province", "gazelle2009", "gazelle2010", "gazelle2011", "gazelle2012", "gazelle2013", "gazelle2014",
"gazelle2015", "gazelle2016", "gazelle2017")
#add year variables to the datasets
data2009$year = 2009
data2012$year = 2012
data2015$year = 2015
#change dataframes to numeric
#change to numeric class of ndl document
#Change 2009
data2009 <- data.frame(lapply(data2009, function(x) {gsub(",", ".", x)}))
for(i in c(3:ncol(data2009))) {
data2009[,i] <- as.character(data2009[,i])
}
#now change from character to numeric
for(i in c(3:ncol(data2009))) {
data2009[,i] <- as.numeric(data2009[,i])
}
#Change 2012
data2012 <- data.frame(lapply(data2012, function(x) {gsub(",", ".", x)}))
for(i in c(3:ncol(data2012))) {
data2012[,i] <- as.character(data2012[,i])
}
#now change from character to numeric
for(i in c(3:ncol(data2012))) {
data2012[,i] <- as.numeric(data2012[,i])
}
#change 2015
data2015 <- data.frame(lapply(data2015, function(x) {gsub(",", ".", x)}))
for(i in c(3:ncol(data2015))) {
data2015[,i] <- as.character(data2015[,i])
}
#now change from character to numeric
for(i in c(3:ncol(data2015))) {
data2015[,i] <- as.numeric(data2015[,i])
}
#inspect the data
ndl_data = ndl@data
sapply(ndl@data, class)
#Start anew from here (differentiating from the gazelle plots)
#deleting the nederlands row from 2012 and 2015
data2009 = data2009[-1, ]
data2012 = data2012[-1, ]
data2015 = data2015[-1, ]
#change the colname of the entrepr. index
colnames(data2009)[29] = "index2009"
colnames(data2012)[29] = "index2012"
colnames(data2015)[29] = "index2015"
#merge the spatial ndl file with the data from index
ndl_data1 = ndl@data
#HAve same province colname
colnames(ndl@data)[5] = colnames(data2009[2])
#merge the spatial ndl file with the gazelles
#1. change province name in ndl data and find states that are not the same
ndl@data$province = as.character(ndl@data$province)
#change the class of the data provinces to character
data2009$province = as.character(gazelle$province)
data2012$province = as.character(gazelle$province)
data2015$province = as.character(gazelle$province)
#change the varying name of Friesland/delete the second friesland
ndl@data$province[3] = data2009[2,2]
#TRY 1: subset to only land provinces
ndl = ndl[ndl$TYPE_1 == "Provincie",]
#Now merge the two datafiles, first to avoid double friesland, then to add the seatiles
ndl@data = merge(ndl@data, data2009[c("province", "index2009")], by= "province")
ndl@data = merge(ndl@data, data2012[c("province", "index2012")], by= "province")
ndl@data = merge(ndl@data, data2015[c("province", "index2015")], by= "province")
#check if successfull
ndl_data = ndl@data
#results: they are all factor and the shp file does not contain any information yet.
#start plotting the gazelles
#plot2009 = qtm(shp = ndl, fill = "gazelle2009", text = "province", fill.title= "Percentage of gazelles in 2009",
# text.size = 0.8, breaks = c(0:0.0008))
#plot2012 = qtm(shp = ndl, fill = "gazelle2012", fill.palette = "Blues", ncol = 2)
#plot2015 = qtm(shp = ndl, fill = c("gazelle2009", "gazelle2012", "gazelle2015"))
index2009 = tm_shape(ndl)  + tmap_mode(mode = "view") + tm_borders()+
tm_fill("index2009", breaks = c(0, 0.1, 0.25, 0.5, 1, 2, 4, Inf), palette = "YlGn",
textNA = "", title = "Entrepreneurial Index in 2009", text = "province", lwd = 2, colorNA = "NA", alpha = 1) +
tm_text("province", size = 0.8, col = "black")
#2 GAzelle in 2012
index2012 = tm_shape(ndl)  + tmap_mode(mode = "view") + tm_borders()+
tm_fill("index2012", breaks = c(0, 0.1, 0.25, 1, 2, 4, Inf), palette = "YlGn",
textNA = "", title = "Entrepreneurial Index in 2012", text = "province", lwd = 2, colorNA = "NA", alpha = 1) +
tm_text("province", size = 0.8, col = "black")
#Gazelle in 2015
index2015 = tm_shape(ndl)  + tmap_mode(mode = "view") + tm_borders()+
tm_fill("index2015", breaks = c(0, 0.1, 0.25, 1,2, 4, Inf), palette = "YlGn",
textNA = "", title = "Entrepreneurial Index in 2015", text = "province", lwd = 2, colorNA = "NA", alpha = 1) +
tm_text("province", size = 0.8, col = "black")
#Now save the plots
tmap_save(index2009, "index2009.png", height=7)
tmap_save(index2012, "index2012.png", height = 7)
tmap_save(index2015, "index2015.png", height = 7)
#interactive
tmap_save(index2009, "index2009.html")
tmap_save(index2012, "index2012.html")
tmap_save(index2015, "index2015.html")
##############################################################################################
##############################################################################################
# Part 3: Heatmaps for Entrepreneurial Index
##############################################################################################
##############################################################################################
#Select working directory
df1 = read.csv("panel-entr.csv")
df1$province = as.character(df1$province)
df1 = df1[, -1]
#subset the dataframe to only the component values
dfheatmap = subset(df1, select = c("province", "year", "inst_comp", "cult_comp", "infra_comp", "demand_comp", "netw_comp", "leader_vc", "finance", "talent_cv", "know_comp", "inter_comp", "index_mult"))
#now aggregate them to means for all three years
df2 = aggregate(dfheatmap, list(province = dfheatmap$province), mean)
df2 = df2[ , - c(2,3)]
#rename the columns nicely
colnames(df2) = c("Province", "Institution", "Culture", "Infra", "Demand", "Network", "Leader", "Finance", "Talent", "Knowl.", "Intermed.", "Entr. Index")
#round df
df2[,-1]  = round(df2[,-1],2)
df2 = df2[order(df2$`Entr. Index`), ]
#melt the dataframe
melt1 = melt(df2)
melt1$Y1 <- cut(melt1$value, breaks = c(0, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2, Inf),right = FALSE)
melt1$Performance = as.numeric(melt1$Y1)
heatmap  = ggplot(melt1, aes(x = variable, y = reorder(Province, value, order = TRUE))) +
geom_tile(color = "black", aes(fill = Performance)) +
geom_text(aes(label = value))+
labs(x = "Elements of the Ecosystem", y = "Provinces of the Netherlands", title = "Individual Elements and the Entrepreneurial Ecosystem of the Netherlands")+
scale_fill_gradient2(low = "pink", high = "Darkgreen", midpoint = 0.8)
heatmap
ggsave("heatmap.png", plot = heatmap)
